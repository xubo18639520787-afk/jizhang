name: 个人记账应用 - 云端构建

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # 允许手动触发构建

jobs:
  build:
    name: 构建 Android APK
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录用于版本号生成

    - name: 设置 JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 设置 Android SDK
      uses: android-actions/setup-android@v3

    - name: 缓存 Gradle 依赖
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 授予 gradlew 执行权限
      run: chmod +x gradlew

    - name: 验证 Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: 清理项目
      run: ./gradlew clean

    - name: 检查代码格式
      run: ./gradlew ktlintCheck
      continue-on-error: true

    - name: 运行单元测试
      run: ./gradlew testDebugUnitTest
      continue-on-error: true

    - name: 构建 Debug APK
      run: ./gradlew assembleDebug

    - name: 构建 Release APK
      run: ./gradlew assembleRelease

    - name: 获取版本信息
      id: version
      run: |
        VERSION_NAME=$(grep "versionName" app/build.gradle.kts | cut -d'"' -f2)
        VERSION_CODE=$(grep "versionCode" app/build.gradle.kts | awk '{print $3}')
        COMMIT_SHA=$(git rev-parse --short HEAD)
        BUILD_TIME=$(date '+%Y%m%d_%H%M%S')
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT

    - name: 重命名 APK 文件
      run: |
        mkdir -p artifacts
        cp app/build/outputs/apk/debug/app-debug.apk artifacts/PersonalAccounting_v${{ steps.version.outputs.version_name }}_debug_${{ steps.version.outputs.build_time }}.apk
        cp app/build/outputs/apk/release/app-release-unsigned.apk artifacts/PersonalAccounting_v${{ steps.version.outputs.version_name }}_release_${{ steps.version.outputs.build_time }}.apk

    - name: 上传 Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: PersonalAccounting-Debug-APK
        path: artifacts/*debug*.apk
        retention-days: 30

    - name: 上传 Release APK
      uses: actions/upload-artifact@v4
      with:
        name: PersonalAccounting-Release-APK
        path: artifacts/*release*.apk
        retention-days: 30

    - name: 上传测试报告
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          app/build/reports/tests/
          app/build/reports/ktlint/
        retention-days: 7

    - name: 构建摘要
      if: always()
      run: |
        echo "## 🚀 构建完成" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: ${{ steps.version.outputs.version_name }} (Build ${{ steps.version.outputs.version_code }})" >> $GITHUB_STEP_SUMMARY
        echo "- **提交**: ${{ steps.version.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **构建时间**: ${{ steps.version.outputs.build_time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **分支**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 APK 文件" >> $GITHUB_STEP_SUMMARY
        echo "- Debug APK: PersonalAccounting_v${{ steps.version.outputs.version_name }}_debug_${{ steps.version.outputs.build_time }}.apk" >> $GITHUB_STEP_SUMMARY
        echo "- Release APK: PersonalAccounting_v${{ steps.version.outputs.version_name }}_release_${{ steps.version.outputs.build_time }}.apk" >> $GITHUB_STEP_SUMMARY
